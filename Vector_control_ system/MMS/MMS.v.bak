module MMS (
	input      [23:0] UA,UB,UC,
	output 	  [23:0] outUA,outUB,outUC

);

reg [23:0] const_1 =  24'b000000000001_001001111001; // 1.15473
reg [23:0] const_2 =  24'b100000000000_100000000000; // -0.5


wire [23:0] mulUA, mulUB, mulUC, add_minmax, mul_minmax;
wire [23:0] mulU_A, mulU_B, mulU_C;

reg [23:0] UAB, UBC, U_AB, U_BC;
reg [23:0] MAX_U, MIN_U;



qmult qmultA (.i_multiplicand(UA), .i_multiplier(const_1), .o_result(mulUA));
qmult qmultB (.i_multiplicand(UB), .i_multiplier(const_1), .o_result(mulUB));
qmult qmultC (.i_multiplicand(UC), .i_multiplier(const_1), .o_result(mulUC));

assign mulU_A = mulUA;
assign mulU_B = mulUB;
assign mulU_C = mulUC;

always @(*)
begin
if (mulU_A >= mulU_B)
begin
	UAB = mulU_A;
end
	else
		begin
			UAB = mulU_B;
		end
if (mulU_B >= mulU_C)
begin
	UBC = mulU_B;
end 
	else 
		begin
		UBC = mulU_C;
		end
if (UAB >= UBC)
begin
	MAX_U = UAB;
end	
	else
		begin
			MAX_U = UBC;
		end
end

always @(*)
begin
if (mulU_A <= mulU_B)
begin
	U_AB = mulU_A;
end
	else
		begin
			U_AB = mulU_B;
		end
if (mulU_B <= mulU_C)
begin
	U_BC = mulU_B;
end 
	else 
		begin
		U_BC = mulU_C;
		end
if (U_AB <= U_BC)
begin
	MIN_U = U_AB;
end	
	else
		begin
			MIN_U = U_BC;
		end 
end 


qadd add_min_max (.a(MAX_U), .b(MIN_U), .c(add_minmax));

qmult qmult_min_max (.i_multiplicand(add_minmax), .i_multiplier(const_2), .o_result(mul_minmax));

qadd add_min_max_A (.a(mul_minmax), .b(mulU_A), .c(outUA));
qadd add_min_max_B (.a(mul_minmax), .b(mulU_B), .c(outUB));
qadd add_min_max_C (.a(mul_minmax), .b(mulU_C), .c(outUC));


endmodule




module qmult #(
	//Parameterized values
	parameter Q = 12,
	parameter N = 24
	)
	(
	 input			[N-1:0]	i_multiplicand,
	 input			[N-1:0]	i_multiplier,
	 output			[N-1:0]	o_result
	 );
	 
	 //	The underlying assumption, here, is that both fixed-point values are of the same length (N,Q)
	 //		Because of this, the results will be of length N+N = 2N bits....
	 //		This also simplifies the hand-back of results, as the binimal point 
	 //		will always be in the same location...
	
	reg [2*N-1:0]	r_result;		//	Multiplication by 2 values of N bits requires a 
											//		register that is N+N = 2N deep...
	reg [N-1:0]		r_RetVal;
	
//--------------------------------------------------------------------------------
	assign o_result = r_RetVal;	//	Only handing back the same number of bits as we received...
											//		with fixed point in same location...
	
//---------------------------------------------------------------------------------
	always @(i_multiplicand, i_multiplier)	begin						//	Do the multiply any time the inputs change
		r_result <= i_multiplicand[N-2:0] * i_multiplier[N-2:0];	//	Removing the sign bits from the multiply - that 
																					//		would introduce *big* errors	
																					//	reset overflow flag to zero
		end
	
		//	This always block will throw a warning, as it uses a & b, but only acts on changes in result...
	always @(r_result) begin													//	Any time the result changes, we need to recompute the sign bit,
		r_RetVal[N-1] <= i_multiplicand[N-1] ^ i_multiplier[N-1];	//		which is the XOR of the input sign bits...  (you do the truth table...)
		r_RetVal[N-2:0] <= r_result[N-2+Q:Q];								//	And we also need to push the proper N bits of result up to 
																						//		the calling entity...
																						// And finally, we need to check for an overflow
			
		end

endmodule


module qadd #(
	//Parameterized values
	parameter Q = 12,
	parameter N = 24
	)
	(
    input [N-1:0] a,
    input [N-1:0] b,
    output [N-1:0] c
    );

reg [N-1:0] res;

assign c = res;

always @(a,b) begin
	// both negative or both positive
	if(a[N-1] == b[N-1]) begin						//	Since they have the same sign, absolute magnitude increases
		res[N-2:0] = a[N-2:0] + b[N-2:0];		//		So we just add the two numbers
		res[N-1] = a[N-1];							//		and set the sign appropriately...  Doesn't matter which one we use, 
															//		they both have the same sign
															//	Do the sign last, on the off-chance there was an overflow...  
		end												//		Not doing any error checking on this...
	//	one of them is negative...
	else if(a[N-1] == 0 && b[N-1] == 1) begin		//	subtract a-b
		if( a[N-2:0] > b[N-2:0] ) begin					//	if a is greater than b,
			res[N-2:0] = a[N-2:0] - b[N-2:0];			//		then just subtract b from a
			res[N-1] = 0;										//		and manually set the sign to positive
			end
		else begin												//	if a is less than b,
			res[N-2:0] = b[N-2:0] - a[N-2:0];			//		we'll actually subtract a from b to avoid a 2's complement answer
			if (res[N-2:0] == 0)
				res[N-1] = 0;										//		I don't like negative zero....
			else
				res[N-1] = 1;										//		and manually set the sign to negative
			end
		end
	else begin												//	subtract b-a (a negative, b positive)
		if( a[N-2:0] > b[N-2:0] ) begin					//	if a is greater than b,
			res[N-2:0] = a[N-2:0] - b[N-2:0];			//		we'll actually subtract b from a to avoid a 2's complement answer
			if (res[N-2:0] == 0)
				res[N-1] = 0;										//		I don't like negative zero....
			else
				res[N-1] = 1;										//		and manually set the sign to negative
			end
		else begin												//	if a is less than b,
			res[N-2:0] = b[N-2:0] - a[N-2:0];			//		then just subtract a from b
			res[N-1] = 0;										//		and manually set the sign to positive
			end
		end
	end
endmodule
